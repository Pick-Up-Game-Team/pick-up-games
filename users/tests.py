# Generated by Selenium IDE
from django.test import TestCase, Client, override_settings
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.webdriver import WebDriver
from .models import Profile, Report
from django.contrib.auth.models import User
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.keys import Keys
from chromedriver_py import binary_path

# Force DEBUG=True to prevent 500 server error (not sure why)
@override_settings(DEBUG=True)
class TestLoginpage(StaticLiveServerTestCase):
    def setUp(self):
        """
        Set up test environment (runs once per test function)
        """
        # Inherit setUp()
        super().setUp()
        
        # Set up Chrome web driver and test client
        self.client = Client()
        self.driver = WebDriver(executable_path=binary_path)
        self.wait = WebDriverWait(self.driver, 10)
        self.driver.implicitly_wait(5)
        self.driver.set_window_size(1936, 1056)
        self.driver.get(f'{self.live_server_url}')
        
        # Define variables
        self.username = 'testuser'
        self.password = 'Testing123!'

        # Create account
        user = User.objects.create_user(username=self.username,
                                        email=f'{self.username}@email.com',
                                        password=self.password)

    def tearDown(self):
        """
        Destroy test environment (run once per test function)
        """
        # Inherit tearDown()
        super().tearDown()
        self.driver.quit()

    def test_loginpage(self):
        """
        Test login page functionality
        """
        
        # Go to login page
        self.driver.find_element_by_link_text('Login').click()
        self.driver.implicitly_wait(1)

        # Test that the created user exists
        try:
            user_obj = Profile.objects.get(user__username=self.username)
        except Profile.DoesNotExist:
            user_obj = None
        self.assertIsNotNone(user_obj)
        
        # Test that the user is not logged in (there should not be a log out button)
        with self.assertRaises(NoSuchElementException):
            self.driver.find_element(By.LINK_TEXT, "Log Out")

        # Enter and submit login credentials to log in
        self.driver.find_element(By.ID, "id_username").send_keys(self.username)
        self.driver.find_element(By.ID, "id_password").send_keys(self.password)
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        
        # Test that the user is logged in (there should be a log out and register link)
        self.wait.until(
            expected_conditions.element_to_be_clickable(
                self.driver.find_element(By.LINK_TEXT, 'Log Out')
            )
        )
        self.wait.until(
            expected_conditions.element_to_be_clickable(
                self.driver.find_element(By.LINK_TEXT, 'Profile')
            )
        )

        # Log out
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()
        self.driver.implicitly_wait(0.1)

        # Test that the user is not logged in (there should not be a log out button)
        with self.assertRaises(NoSuchElementException):
            self.driver.find_element_by_link_text('Log Out')

class TestRegistrationTest(TestCase):
    def setUp(self):
        self.driver = webdriver.Chrome(executable_path=binary_path)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_registrationTest(self):
        # Test name: Registration-Test
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("http://127.0.0.1:8000/")
        # 2 | setWindowSize | 1050x852 |
        self.driver.set_window_size(1050, 852)
        # 3 | click | linkText=Register |
        self.driver.find_element(By.LINK_TEXT, "Register").click()
        # 4 | type | id=id_username | RegisterUser1
        self.driver.find_element(By.ID, "id_username").send_keys("RegisterUser1")
        # 5 | type | id=id_password1 | Checken1234
        self.driver.find_element(By.ID, "id_password1").send_keys("Checken1234")
        # 6 | type | id=id_password2 | Chicken1234
        self.driver.find_element(By.ID, "id_password2").send_keys("Chicken1234")
        # 7 | click | css=.btn |
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        # 8 | click | id=id_password1 |
        self.driver.find_element(By.ID, "id_password1").click()
        # 9 | type | id=id_password1 | Chicken1234
        self.driver.find_element(By.ID, "id_password1").send_keys("Chicken1234")
        # 10 | type | id=id_password2 | Chicken1234
        self.driver.find_element(By.ID, "id_password2").send_keys("Chicken1234")
        # 11 | sendKeys | id=id_password2 | ${KEY_ENTER}
        self.driver.find_element(By.ID, "id_password2").send_keys(Keys.ENTER)
        # 12 | click | linkText=Login |
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        # 13 | click | css=.col-lg-6 |
        self.driver.find_element(By.CSS_SELECTOR, ".col-lg-6").click()
        # 14 | type | id=id_username | RegisterUser1
        self.driver.find_element(By.ID, "id_username").send_keys("RegisterUser1")
        # 15 | click | css=.content-section |
        self.driver.find_element(By.CSS_SELECTOR, ".content-section").click()
        # 16 | type | id=id_password | Chicken1234
        self.driver.find_element(By.ID, "id_password").send_keys("Chicken1234")
        # 17 | click | css=.btn |
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()

# Force DEBUG=True to prevent 500 server error (not sure why)
@override_settings(DEBUG=True)
class TestReportSystem(StaticLiveServerTestCase):
    def setUp(self):
        """
        Set up test environment (runs once per test function)
        """
        # Inherit setUp()
        super().setUp()
        
        # Set up Chrome web driver and test client
        self.client = Client()
        self.driver = WebDriver(executable_path=binary_path)
        self.driver.implicitly_wait(5)
        
        # Define variables
        self.username = 'testuser'
        self.report_username = 'badguy'
        self.password = 'Testing123!'
        self.report_message = 'This guy is bad! Look at his name!!'

        # Create account
        self.user = User.objects.create_user(username=self.username,
                                        email=f'{self.username}@email.com',
                                        password=self.password)
        
        # Create account of user to be reported
        self.report_user = User.objects.create_user(self.report_username,
                                        f'{self.report_username}@email.com',
                                        self.password)
        
        self.driver.set_window_size(1936, 1056)
        
    def tearDown(self):
        """
        Destroy test environment (run once per test function)
        """
        # Inherit tearDown()
        super().tearDown()
        self.driver.quit()

    def test_report(self):
        """
        Test the report feature
        """
        # Go to login page
        self.driver.get(f"{self.live_server_url}/login/")
        
        # Enter and submit login credentials to log in
        self.driver.find_element(By.ID, "id_username").send_keys(self.username)
        self.driver.find_element(By.ID, "id_password").send_keys(self.password)
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        
        # Go to report badguy user
        # NOTE: this will redirect to login if user is not logged in!
        self.driver.get(f"{self.live_server_url}/report/?user={self.report_user}")
        
        # Check for correct form title
        form_title = self.driver.find_element(By.TAG_NAME, "legend").text
        self.assertEqual(form_title, f"Report {self.report_username}")
        
        # Submit report with given message
        self.driver.find_element(By.ID, "id_message").send_keys(self.report_message)
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        
        # Check the correctness of the report object
        report_exists = Report.objects.filter(author=self.user,
                                              reported_user=self.report_user,
                                              message=self.report_message).exists()
        self.assertTrue(report_exists)


@override_settings(DEBUG=True)
class TestFriendRequests(StaticLiveServerTestCase):
    def setUp(self):
        """
        Set up test environment (runs once per test function)
        """

        # Inherit setUp()
        super().setUp()

        # Set up Chrome web driver and test client
        self.client = Client()
        self.driver = WebDriver(executable_path=binary_path)
        self.driver.implicitly_wait(5)

        # Define variables
        self.username1 = 'WillTestUser1'
        self.password1 = 'fakepass112'
        self.username2 = 'WillTestUser2'
        self.password2 = 'fakepass113'

        # Create account
        self.user1 = User.objects.create_user(username=self.username1,
                                             email=f'{self.username1}@email.com',
                                             password=self.password1)
        self.user2 = User.objects.create_user(username=self.username2,
                                              email=f'{self.username2}@email.com',
                                              password=self.password2)


        self.driver.set_window_size(1936, 1056)



    def tearDown(self):
        """
        Destroy test environment (run once per test function)
        """
        # Inherit tearDown()
        super().tearDown()
        self.driver.quit()

    def test_friendRequestTest(self):
        # Test name: FriendRequestTest
        # Step # | name | target | value | comment
        # 1 | open | / |  |
        #self.driver.get("http://127.0.0.1:8000/")
        self.driver.get(f"{self.live_server_url}")
        # 2 | setWindowSize | 1382x886 |  |
        self.driver.set_window_size(1382, 886)
        # 3 | click | linkText=Login |  |
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        # 4 | type | id=id_username | WillTestUser1 |
        self.driver.find_element(By.ID, "id_username").send_keys("WillTestUser1")
        # 5 | type | id=id_password | fakepass112 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass112")
        # 6 | click | css=.btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        # 7 | click | css=form:nth-child(6) > input |  |
        self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(6) > input").click()
        # 8 | click | css=.ui:nth-child(6) form > .ui |  |
        button_list = self.driver.find_elements(By.CSS_SELECTOR, "button")
        for button in button_list:
            click = button.click() if button.text == "Add to friends" else None
        # 9 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()
        # 10 | click | linkText=Login |  |
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        # 11 | type | id=id_username | WillTestUser2 |
        self.driver.find_element(By.ID, "id_username").send_keys("WillTestUser2")
        # 12 | click | id=id_password |  |
        self.driver.find_element(By.ID, "id_password").click()
        # 13 | type | id=id_password | fakepass113 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass113")
        # 14 | sendKeys | id=id_password | ${KEY_ENTER} |
        self.driver.find_element(By.ID, "id_password").send_keys(Keys.ENTER)
        # 15 | click | css=.check |  |
        self.driver.get(f"{self.live_server_url}/profile/my-invites/")
        self.driver.find_element(By.CSS_SELECTOR, ".check").click()
        # 16 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()
        # 17 | click | linkText=Login |  |
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        # 18 | type | id=id_username | WillTestUser1 |
        self.driver.find_element(By.ID, "id_username").send_keys("WillTestUser1")
        # 19 | click | id=id_password |  |
        self.driver.find_element(By.ID, "id_password").click()
        # 20 | type | id=id_password | fakepass112 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass112")
        # 21 | sendKeys | id=id_password | ${KEY_ENTER} |
        self.driver.find_element(By.ID, "id_password").send_keys(Keys.ENTER)
        # 22 | click | css=form:nth-child(6) > input |  |
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(6) > input").click()
        # 23 | click | css=.negative |  |
        self.driver.find_element(By.CSS_SELECTOR, ".negative").click()
        # 24 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()



@override_settings(DEBUG=True)
class TestManageFriends(StaticLiveServerTestCase):
    def setUp(self):
        """
        Set up test environment (runs once per test function)
        """

        # Inherit setUp()
        super().setUp()

        # Set up Chrome web driver and test client
        self.client = Client()
        self.driver = WebDriver(executable_path=binary_path)
        self.driver.implicitly_wait(5)

        # Define variables
        self.username2 = 'testUser1'
        self.password2 = 'fakepass112'
        self.username3 = 'testUser2'
        self.password3 = 'fakepass113'
        self.username4 = 'testUser3'
        self.password4 = 'fakepass114'
        self.username1 = 'WillReadyhough'
        self.password1 = 'Games1101'

        # Create account
        self.user1 = User.objects.create_user(username=self.username1,
                                              email=f'{self.username1}@email.com',
                                              password=self.password1)
        self.user2 = User.objects.create_user(username=self.username2,
                                             email=f'{self.username2}@email.com',
                                             password=self.password2)
        self.user3 = User.objects.create_user(username=self.username3,
                                              email=f'{self.username3}@email.com',
                                              password=self.password3)
        self.user4 = User.objects.create_user(username=self.username4,
                                              email=f'{self.username4}@email.com',
                                              password=self.password4)



        self.driver.set_window_size(1936, 1056)



    def tearDown(self):
        """
        Destroy test environment (run once per test function)
        """
        # Inherit tearDown()
        super().tearDown()
        self.driver.quit()

    def test_manageFriends(self):
        self.driver.get(f"{self.live_server_url}")
        # Step # | name | target | value | comment
        # 2 | setWindowSize | 1382x886 |  |
        self.driver.set_window_size(1382, 886)
        # 3 | click | linkText=Login |  |
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        # 4 | type | id=id_username | testUser1 |
        self.driver.find_element(By.ID, "id_username").send_keys("testUser1")
        # 5 | type | id=id_password | fakepass112 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass112")
        # 6 | click | id=id_username |  |
        self.driver.find_element(By.ID, "id_username").click()
        # 7 | click | css=.btn-outline-info |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info").click()
        # 8 | click | linkText=Profile |  |
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        # 9 | click | linkText=Change Public Info: |  |
        self.driver.find_element(By.LINK_TEXT, "Change Public Info:").click()
        # 10 | click | css=.col-md-4 input |  |
        self.driver.find_element(By.CSS_SELECTOR, ".col-md-4 input").click()
        # 11 | click | css=#headingTwo .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingTwo .btn").click()
        # 12 | click | css=#headingThree .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingThree .btn").click()
        # 13 | click | css=#headingFour .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingFour .btn").click()
        # 14 | click | css=.ui:nth-child(2) form > .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".ui:nth-child(2) form > .btn").click()
        # 15 | click | css=#headingFour .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingFour .btn").click()
        # 16 | click | css=.ui:nth-child(2) form > .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".ui:nth-child(2) form > .btn").click()
        # 17 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()
        # 18 | click | linkText=here |  |
        self.driver.find_element(By.LINK_TEXT, "here").click()
        # 19 | type | id=id_username | testUser2 |
        self.driver.find_element(By.ID, "id_username").send_keys("testUser2")
        # 20 | type | id=id_password | fakepass113 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass113")
        # 21 | click | css=.btn-outline-info |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info").click()
        # 22 | click | css=.flex-column |  |
        self.driver.find_element(By.CSS_SELECTOR, ".flex-column").click()
        # 23 | click | linkText=Profile |  |
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        # 24 | click | linkText=Change Public Info: |  |
        self.driver.find_element(By.LINK_TEXT, "Change Public Info:").click()
        # 25 | click | css=.col-md-4 input |  |
        self.driver.find_element(By.CSS_SELECTOR, ".col-md-4 input").click()
        # 26 | click | css=#headingTwo .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingTwo .btn").click()
        # 27 | click | css=.btn-success > .check |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success > .check").click()
        # 28 | click | css=.btn-danger |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-danger").click()
        # 29 | click | css=#headingFour .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingFour .btn").click()
        # 30 | click | css=.ui:nth-child(3) form > .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".ui:nth-child(3) form > .btn").click()
        # 31 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()
        # 32 | click | linkText=here |  |
        self.driver.find_element(By.LINK_TEXT, "here").click()
        # 33 | click | id=id_username |  |
        self.driver.find_element(By.ID, "id_username").click()
        # 34 | type | id=id_username | testUser3 |
        self.driver.find_element(By.ID, "id_username").send_keys("testUser3")
        # 35 | type | id=id_password | fakepass114 |
        self.driver.find_element(By.ID, "id_password").send_keys("fakepass114")
        # 36 | click | css=.btn-outline-info |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-info").click()
        # 37 | click | css=.flex-column |  |
        self.driver.find_element(By.CSS_SELECTOR, ".flex-column").click()
        # 38 | click | linkText=Profile |  |
        self.driver.find_element(By.LINK_TEXT, "Profile").click()
        # 39 | click | linkText=Change Public Info: |  |
        self.driver.find_element(By.LINK_TEXT, "Change Public Info:").click()
        # 40 | click | css=.col-md-4 input |  |
        self.driver.find_element(By.CSS_SELECTOR, ".col-md-4 input").click()
        # 41 | click | css=#headingTwo .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingTwo .btn").click()
        # 42 | click | css=.ui:nth-child(1) > .ui form:nth-child(3) > .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".ui:nth-child(1) > .ui form:nth-child(3) > .btn").click()
        # 43 | click | css=#headingTwo .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingTwo .btn").click()
        # 44 | click | css=.btn-success > .check |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success > .check").click()
        # 45 | click | css=.ui:nth-child(2) form > .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, ".ui:nth-child(2) form > .btn").click()
        # 46 | click | css=.btn-danger |  |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-danger").click()
        # 47 | click | css=#headingThree .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingThree .btn").click()
        # 48 | click | css=#headingFour .btn |  |
        self.driver.find_element(By.CSS_SELECTOR, "#headingFour .btn").click()
        # 49 | click | linkText=Log Out |  |
        self.driver.find_element(By.LINK_TEXT, "Log Out").click()


